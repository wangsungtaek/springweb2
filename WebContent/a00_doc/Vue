# Vue의 환경 설정..
1. js lib 처리

2. webpack환경 처리
	1) node설치
	2) npm으로 vue cli 도구 설정
	3) vue cli 도구를 통해서 프로젝트 생성
	4) node 웹 서비스를 통해 vue 초기화면 구성

3. MVM패턴에 의한 화면 처리.
	1) View 화면 DOM 객체 구성
	2) Model	화면에 처리할 모델데이터 선언
	3) VM(View model) : View와 moel을 연결하는 객체

#Vue의 핵심 기능
1. MVVM 패턴을 통해서 화면과 데이터 처리
	- jsp의 화면에서 모델데이터 처리
	- ajax를 통한 DOM객체 생성 및 화면 처리 방식
2. Component를 활용하여 가상 DOM으로 효과적인 화면 처리
	- 사용자 정의 tag lib와 같은 사용자 정의 태그라고 할 수 있는
		Component개념을 활용하여 보다 효과적으로 화면 처리할 수 있다.
		ex)
		<empSch></empSch>
		<emplist></emplist>
	 
3. 비동기통신 ajax를 활용하여 데이터를 처리
	- ajax처리 모듈을 axios 사용.
	- 기본화면이 로딩된 상황에서 ajax데이터를 이용하여 모델데이터로
		처리하면서 화면을 구성하여 데이터를 처리할 수 있다.

# Vue의 knowledge map
1. js 프로그래밍 기초
	1) 데이터 처리
		- js 
		변수선언, 데이터유형(숫자,문자열,함수형,불린형,객체), 함수선언, 객체 선언.
		
		- vue
		일반변수와 데이터
			디렉티브를 통한 데이터선언(model-json형으로 선언)
			{{변수명}} v-text="변수명" v-html="변수명"
		함수처리
			computed, methods, watch, 라이프사이클메서드
	3) 조건/반복문
		- js
			if, for, forEach...
		- vue
			<요소객체 v-if="모델데이터의 조건">
			<요소객체 v-else-if="모델데이터의 조건">
			<요소객체 v-else>
			
			<요소객체 v-for="(속성값, 속성) in 객체형">
	
			<요소객체 v-for="(단위객체, index) in 배열형데이터">
			
2. DOM 활용
	1) js
		DOM 선택자, DOM 속성변경 처리, CSS를 활용한 DOM객체 변경 처리.
		document.querySelector("선택자")
		innerHTML, value
		$("div").html("<h2>안녕</h2><p>데이터처리</p>");
		text(), html(), .attr("속성", 속성값), css("속성",속성값)
	2) Vue
		화면에서 바로 구성요소에 directive를 활용해서 처리 모델데이터와
		연동하여 처리 한다. {{모델데이터}} v-text="모델데이터"
		v-bind:속성="모델데이터"
		
		동적인 DOM mapping 처리 : v-model(입력하는 form하위객체와 model데이터
			와 쌍방향으로 데이터 처리)
			
		사용자 정의 DOM객체의 선언하여, 계층 구조화된 Component를 활용한다.
		컴포넌트 선언
			<template id="empSch">
				검색 처리 화면 구성..
			</template>
			
			Vue.component("empSch",{template:"#empSch"}
			
			<empSch></empSch>

3. Event 처리
	1) js
		동적인 화면처리를 위하여 함수핸들러 함수를 정의
		<요소객체 이벤트명="핸들러함수"> ex) <button onclick="call()"
	2) Vue
		new Vue()인스턴스 객체안에 methods 속성으로 이벤트 처리할 함수 선언
			methods:{
				call:function(){
				
				}
			}
		<요소객체 v-on:이벤트명="함수명"
		ex) <input type="button" v-on:click="call"/>

4. style을 통한 화면처리 및 동적 변경
	1) html/css/js
		<h3 class="클래스명"
		<h2 style="속성:속성값;속성:속성값;">
		$("h2").css("속성","속성값");
		$("h3").addClass("클래스명");
	2) Vue : json형태의 객체형태로 속성/속성값 모델에서 정의된 데이터로 처리한다.
		<h3 :class="{클래스명:적용여부(true/false)...}"
		<h2 :style="{backgroundColor:모델속성,color:모델속성...}"
		위 내용도 Vue 인스턴스 객체 안에 있는 속성 methods의 함수로 매핑하여
		처리할 수 있다. 

5. ajax 처리
	1) js
		new XMLHttpRequest(), $.ajax({속성:속성값})
		비동기적으로 초기 로딩된 화면에서 ajax로 접근하여 받아온 데이터를
		DOM객체를 구성하거나 요청하여 처리하는 방식
	2) Vue
		기본 ajax처리 lib나, axios 모듈을 통해서
		ajax데이터를 받아와서 new Vue인스턴스 속성인 methods나
		lifecyle 메서드인 created를 통해서 모델데이터를 할당해줌으로
		화면에 구성된 directive 데이터를 출력 처리할 수 있다.
		var vm = new Vue({
			data:{모델데이터...},
			methods:{
				list:function(){
					axios.post("서버호출").then((response=>{
						response : 서버에서 받은 데이터
					,	this.모델데이터 = response.data 서버에서 받은
						데이터를 할당.
					});
				}
			},
			created:function(){
			
			}
		});

# 기본 directive
1. vue에서 모델데이터를 화면에 처리하는 것을 directive라고 한다.
2. directive는 데이터를 저장하는 것으로 크게 두 가지로 나눈다.
	1) 단방향
		mustache : {{모델데이터}} 형식으로 화면에 해당 모델데이터를
			바로 출력할 때, 활용된다.
			ex) <태그>{{모델데이터}}</태그>
				<h2>{{greet}}</h2>
		v-text : 요소객체의 속성으로 선언하여, 해당 속성값으로 모델데이터를
			처리한다. <태그 v-text="모델데이터"></태그> 형식
			ex) <h3 v-text="color"></h3>
		v-html : 요소객체의 속성으로 모델데이터에서 태그 내용이 포함되면
			html코드를 랜더링시켜 출력 한다.
			ex) var model={"show":"<h2>반가워요</h2>"}
				<div v-html="show">
				</div>
				
	2) 양방향
		v-model :입력 요소객체에 모델데이터의 속성을 설정하면,
			입력을 할때, 모델데이터를 변경을 한다.
		이에 따라서 모델 데이터와 연결된 데이터를 바로 변경 처리한다.
		ex) var model={price: 0, cnt:0}
		<input v-model="price"/>	가격:[0]
		<input v-model="cnt"/>		갯수:[0]
		<h2>가격:{{price}}</h2>	화면에 입력요소에 입력과 동시에 해당 내용 출력
		<h2>갯수:{{cnt}}</h2>
		<h2>총계:{{price*cnt}}</h2>